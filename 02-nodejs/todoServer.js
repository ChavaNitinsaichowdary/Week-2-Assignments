/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

app.use(bodyParser.json());

let todos = [];
let obj = {
  title : "Buy macos",
  description : "Want to buy mac by today",
  id: Math.floor(Math.random() * 1000000)
}
let obj1 = {
  title : "Buy groceries",
  description : "buy groceries  by today",
  id: Math.floor(Math.random() * 1000000)
}
let obj2 = {
  title : "go out",
  description : "chill",
  id: Math.floor(Math.random() * 1000000)
}
todos.push(obj);
todos.push(obj1);
todos.push(obj2);

app.get('/todos', (req, res) => {
  res.json(todos)
})
app.get('/todos/:id',(req,res)=>{
  //const todo = todos.find(t => t.id === parseInt(req.params.id));
  const todo = todos.find(t => t.id === parseInt(req.params.id));
  if (!todo) {
    res.status(404).send();
  } else {
    res.json(todo);
  }
})
app.post('/todos',(req,res)=>{
  let newTodo = {
    title : req.body.title,
    description : req.body.description,
    id : Math.floor(Math.random()*100000)
  }
  todos.push(newTodo);
  res.status(200).json(obj);
})

app.put('/todos/:id',(req,res)=>{
  const todoIndex = todos.findIndex(t => t.id === parseInt(req.params.id));
  if (todoIndex === -1) {
    res.status(404).send();
  } else {
    todos[todoIndex].title = req.body.title;
    todos[todoIndex].description = req.body.description;
    res.json(todos[todoIndex]);
  }
})
app.delete('/todos/:id',(req,res)=>{
  let updated = false;
  for(let i=0;i<todos.length;i++){
    if(todos[i].id===parseInt(req.params.id)){
      todos.splice(i,1);
      updated = true;
    }
  }
  if(updated){
    res.status(200).send('deleted');
  } 
  else{
    res.status(404).send('not found');
  }
})
app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})
app.use((req, res, next) => {
  res.status(404).send();
});

module.exports = app;
